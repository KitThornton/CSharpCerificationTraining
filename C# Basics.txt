Here we'll make some notes based on the Programming in C# course we're undertaking

********* ---- Section 3 - C# Fundamentals ---- *********
1. Three pillars of OOP
Encapsulation
Grouping data and functions into a single component
Allows selective hiding of data and functionalities

Inheritance
Enables one class to reuse code from another class
A single object can possess the functionality of multiple classes
Provides ability to extend and modify behaviour

Polymorphism
The result of Encapsulation and Inheritance
The ability to provide different functionalities for same method name

2. Objects
An object is a variable containing two things:
    * The properties that were defined in the class
    * The abilities defined as methods in the class
Each object hs its own state (unique collection of data values)

3. Types
C# is a strongly typed language -> every variable and constant has a specific type
A type specifies up to four main characteristics of the data that can be stored
    * The storage space that a var of the type requires
    * The max and min values that it can represent
    * The members (methods, fields, events) that it contains
    * The base type it inherits from

Type-safe -> The compiler makes sure that all operations performed are valid for the type used
Types:
    * Value types
    * Reference types
Major differences: 
    * Compile-time rules
    * Run-time behaviour (memory usage and management)

.NET Framework stores items in memory in two locations:
    * Value types stored on the Stack 
        * bool, byte, char, decimal, double, enum, float, int etc.
        * Each variable is stored on the stack in the order it was created.
        * Each variable stores its own data.
        * The amount of memory required to store a value type is a set amount.
        * When the var is not needed, deleted from the stack. Memory is freed up.
    * Reference types stored on Stack and Heap
        * Strings, arrays, class, delegates
        * The variable is stored on the stack
        * The data is stored on the heap
        * A pointer is used to link the variable in stack and data value on heap
        
4. Arrays and Collections: Storing multiple related objects
    * Arrays store multiple variables of the same type in an array data structure
    * Collections provide a flexible way to work with groups of objects
        * Unlike arrays, can grow and shrink dynamically
        
5. StringBuilder
    * String objects are immutable
        * They can't be changed after created
        * All methods and operators that appear to modify just create a new one
    * StringBuilder class creates a string buffer that provides better performance than
        looping functions executing many string operations (always deleting an recreating)



